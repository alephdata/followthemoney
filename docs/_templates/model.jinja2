.. _schemata: 

Schemata definitions
=====================

Below is an overview of the default data model shipped with `followthemoney` (FtM).
It currently includes {{model.schemata | length}} schemata that can be selected
to generate entities.

.. contents:: Schemata
    :local:

{% for schema in model.schemata.values() | sort(attribute='label'): %}
.. _schema-{{schema.name}}:

{{schema.label}}
--------------------------------------------------------------------------------

.. object:: {{schema.name}}

    {% if schema.description -%}
        {{schema.description}}
    {%- endif %}

    {% if schema.hidden %}
    .. option:: hidden: {{schema.hidden}}

        see :py:attr:`followthemoney.schema.Schema.hidden`
    {% endif %}
    {% if schema.abstract %}
    .. option:: abstract: {{schema.abstract}}

        see :py:attr:`followthemoney.schema.Schema.abstract`
    {% endif %}
    {% if schema.generated %}
    .. option:: generated: {{schema.generated}}

        see :py:attr:`followthemoney.schema.Schema.generated`
    {% endif %}

    {% if schema.edge -%}
    .. option:: edge: {{schema.edge}}

        In a network graph, this schema is converted into an edge
        between ``{{schema.edge_source}}`` and ``{{schema.edge_target}}``.

        see :py:attr:`followthemoney.schema.Schema.edge`
    {%- endif %}

    {% if schema.extends -%}
    .. option:: extends:

        {% for extend in schema.extends -%}
        :ref:`schema-{{extend.name}}`{% if not loop.last %}{{', '}}{% endif %}
        {%- endfor %}

        see :py:attr:`followthemoney.schema.Schema.extends`
    {%- endif %}

    {% if schema.descendants -%}
    .. option:: descendants:

      {% for desc in schema.descendants -%}
      :ref:`schema-{{desc.name}}`{% if not loop.last %}{{', '}}{% endif %}
      {%- endfor %}

      see :py:attr:`followthemoney.schema.Schema.descendants`
    {%- endif %}

    .. option:: Properties:
        {% for prop in schema.properties.values() %}
        {% if prop.schema == schema and not prop.stub %}
        .. attribute:: {{prop.name}} ({{prop.type.name}})
            :noindex:

            {{prop.label}} (:ref:`{{prop.type.label}} <type-{{prop.type.name}}>`{% if prop.range -%}, of type :ref:`schema-{{prop.range.name}}`{%- endif %})

            {% if prop.description -%}*{{prop.description.strip()}}*{%- endif %}

        {% endif %}
        {% endfor %}
        {% if schema.extends -%}
        And all properties from {% for extend in schema.extends -%}
        :ref:`schema-{{extend.name}}`{% if not loop.last -%}{{', '}}{%- endif %}
        {%- endfor %}.
        {%- endif %}

    {% if schema.caption -%}
    .. option:: Properties used as caption:

        {% for caption in schema.caption -%}
        ``{{caption}}``{% if not loop.last %}{{', '}}{% endif %}
        {%- endfor %}

        see :py:attr:`followthemoney.schema.Schema.caption`
    {%- endif %}

    {% if schema.featured -%}
    .. option:: Important properties:

        {% for feature in schema.featured -%}
        ``{{feature}}``{% if not loop.last %}{{', '}}{% endif %}
        {%- endfor %}

        see :py:attr:`followthemoney.schema.Schema.featured`
    {%- endif %}

    {% if schema.temporal_start -%}
    .. option:: Temporal start:

        {% for property in schema.temporal_start -%}
            ``{{property}}``{% if not loop.last %}{{', '}}{% endif %}
        {%- endfor %}

        see :py:attr:`followthemoney.schema.Schema.temporal_start_props`
    {%- endif %}

    {% if schema.temporal_end -%}
    .. option:: Temporal end:

        {% for property in schema.temporal_end -%}
            ``{{property}}``{% if not loop.last %}{{', '}}{% endif %}
        {%- endfor %}

        see :py:attr:`followthemoney.schema.Schema.temporal_end_props`
    {%- endif %}

{% endfor %}
