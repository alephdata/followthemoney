---
import PropertyType from '@components/explorer/PropertyType.astro';
import SchemaLink from '@components/explorer/SchemaLink.astro';
import IndexTable from '@components/explorer/IndexTable.astro';
import PropertyIndicator from '@components/explorer/PropertyIndicator.astro';
import DeprecatedIndicator from '@components/explorer/DeprecatedIndicator.astro';

const { schema, ...rest } = Astro.props;

const isFeatured = (property) =>
  property.schema.featured.includes(property.name);
const isRequired = (property) =>
  property.schema.required.includes(property.name);
const isHidden = (property) => property.hidden;
const isInherited = (property) => property.schema.name !== schema.name;
const isDeprecated = (property) => property.deprecated;
const isStub = (property) => property.stub;

const properties = Array.from(schema.getProperties().values())
  .sort((a, b) => a.name.localeCompare(b.name))
  .sort((a, b) => isFeatured(b) - isFeatured(a))
  .sort((a, b) => isRequired(b) - isRequired(a));
---

<style>
  .SchemaProperties__header {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-sm);
  }

  .SchemaProperties__toggles {
    display: flex;
    gap: var(--space-sm);
  }

  .SchemaProperties__schema {
    opacity: 66%;
  }

  [data-show-inherited='false'] [data-is-inherited]:not(:has(:target)),
  [data-show-stubs='false'] [data-is-stub]:not(:has(:target)) {
    display: none;
  }

  .SchemaProperties tr {
    position: relative;
  }

  .SchemaProperties__anchor {
    position: absolute;

    /* Shift anchor to account for the sticky table header */
    top: calc(-1 * var(--space));
  }

  .SchemaProperties tr:has(.SchemaProperties__anchor:target) {
    background-color: var(--color-bg-highlight);
    border-radius: var(--radius);
    box-shadow: 0 0 0 1px var(--color-border-highlight);
    color: var(--color-fg-emphasis);
  }

  .SchemaProperties tr:has(.SchemaProperties__anchor:target) td {
    /* Remove border above highlighted row */
    border-top: none;
  }

  .SchemaProperties tr:has(.SchemaProperties__anchor:target) + tr td {
    /* Remove border below highlighted row */
    border-top: none;
  }

  .SchemaProperties th:first-child {
    /* Make sure that the outline of the highlighted row isn’t visible behind sticky header */
    box-shadow: -1px 0 0 var(--color-bg-default);
  }

  .SchemaProperties th:last-child {
    /* Make sure that the outline of the highlighted row isn’t visible behind sticky header */
    box-shadow: 1px 0 0 var(--color-bg-default);
  }
</style>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.SchemaProperties');
    const toggles = document.querySelectorAll('.SchemaProperties__toggle');

    for (const toggle of toggles) {
      const setting = toggle.dataset.toggleSetting;

      if (!setting) {
        return;
      }

      container.dataset[setting] = toggle.checked ? 'true' : 'false';

      toggle.addEventListener('change', () => {
        container.dataset[setting] = toggle.checked ? 'true' : 'false';
      });
    }
  });
</script>

<section class="SchemaProperties" data-show-inherited="true" {...rest}>
  <div class="SchemaProperties__header">
    <h2 class="SchemaProperties__heading beta">Properties</h2>

    <div class="SchemaProperties__toggles">
      <label>
        <input
          type="checkbox"
          class="SchemaProperties__toggle"
          checked
          data-toggle-setting="showInherited"
        />
        Show inherited
      </label>

      <label>
        <input
          type="checkbox"
          class="SchemaProperties__toggle"
          data-toggle-setting="showStubs"
        />
        Show stubs
      </label>
    </div>
  </div>

  <IndexTable>
    <tr slot="head">
      <th>Name</th>
      <th>Label</th>
      <th>Type</th>
    </tr>

    {
      properties.map((prop) => (
        <tr data-is-inherited={isInherited(prop)} data-is-stub={isStub(prop)}>
          <td>
            <span
              id={`property-${prop.name}`}
              class="SchemaProperties__anchor"
            />
            {/* prettier-ignore */}
            <code class="SchemaProperties__property">{/*
              */}<span class="SchemaProperties__schema">{prop.schema.name}:</span>{/*
              */}<span data-docsearch-level={!isInherited(prop) && 3}>{prop.name}</span>{/*
            */}</code>
            {isFeatured(prop) && <PropertyIndicator type="featured" />}
            {isRequired(prop) && <PropertyIndicator type="required" />}
            {isHidden(prop) && <PropertyIndicator type="hidden" />}
            {isStub(prop) && <PropertyIndicator type="stub" />}
            {isDeprecated(prop) && (
              <DeprecatedIndicator message="This property is deprecated and will be removed in a future version of the FollowTheMoney model." />
            )}
          </td>

          <td>{prop.label}</td>

          <td>
            <PropertyType property={prop} />
          </td>
        </tr>
      ))
    }
  </IndexTable>
</section>
